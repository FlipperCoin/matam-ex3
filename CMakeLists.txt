cmake_minimum_required(VERSION 3.0.0)
project(partA VERSION 0.1.0)

include(CTest)
enable_testing()

SET(CXX_MTM_FLAGS "-std=c++11 -Wall -Werror -pedantic-errors -DNDEBUG")

SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS} ${CXX_MTM_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")

SET(SOURCES_PART_A partA/date_wrap partA/exceptions)
SET(SOURCES_PART_B partB/base_event partB/closed_event partB/custom_event partB/event_container partB/festival partB/one_time_event partB/open_event partB/recurring_event partB/shared_pointer.h)
SET(SOURCES_PART_C partC/schedule)

add_library(date partA/date.c partA/date.h)

link_directories(partA)
add_executable(progA partA/test_partA ${SOURCES_PART_A})
add_executable(progB partB/test_partB ${SOURCES_PART_A} ${SOURCES_PART_B})
add_executable(progC partC/test_partC.cpp ${SOURCES_PART_A} ${SOURCES_PART_B} ${SOURCES_PART_C})
target_link_libraries(progA date)
target_link_libraries(progB date)
target_link_libraries(progC date)
target_include_directories(progA PUBLIC partA)
target_include_directories(progB PUBLIC partA partB)
target_include_directories(progC PUBLIC partA partB partC)
#add_executable(progA_adam provided/test_partA ${SOURCES_PART_A})
#add_executable(progB_adam provided/test_partB ${SOURCES_PART_A} ${SOURCES_PART_B})
#add_executable(progC_adam provided/test_partC.cpp ${SOURCES_PART_A} ${SOURCES_PART_B} ${SOURCES_PART_C})
#target_link_libraries(progA_adam date)
#target_link_libraries(progB_adam date)
#target_link_libraries(progC_adam date)
#target_include_directories(progA_adam PUBLIC partA)
#target_include_directories(progB_adam PUBLIC partA partB)
#target_include_directories(progC_adam PUBLIC partA partB partC)

#add_executable(progA1 hen_tests/partA/date_tests ${SOURCES_PART_A})
#add_executable(progB1 hen_tests/partB/closed_event_tests ${SOURCES_PART_A} ${SOURCES_PART_B})
#add_executable(progB2 hen_tests/partB/custom_event_tests ${SOURCES_PART_A} ${SOURCES_PART_B})
#add_executable(progB3 hen_tests/partB/festival_tests.cpp ${SOURCES_PART_A} ${SOURCES_PART_B})
#add_executable(progB4 hen_tests/partB/general_tests.cpp ${SOURCES_PART_A} ${SOURCES_PART_B})
#add_executable(progB5 hen_tests/partB/one_time_event_tests.cpp ${SOURCES_PART_A} ${SOURCES_PART_B})
#add_executable(progB6 hen_tests/partB/open_event_tests.cpp ${SOURCES_PART_A} ${SOURCES_PART_B})
#add_executable(progB7 hen_tests/partB/recurring_event_tests.cpp ${SOURCES_PART_A} ${SOURCES_PART_B})
#add_executable(progC1 hen_tests/partC/schedule_tests.cpp ${SOURCES_PART_A} ${SOURCES_PART_B} ${SOURCES_PART_C})
#target_link_libraries(progA1 date)
#target_link_libraries(progB1 date)
#target_link_libraries(progB2 date)
#target_link_libraries(progB3 date)
#target_link_libraries(progB4 date)
#target_link_libraries(progB5 date)
#target_link_libraries(progB6 date)
#target_link_libraries(progB7 date)
#target_link_libraries(progC1 date)
#target_include_directories(progA1 PUBLIC partA)
#target_include_directories(progB1 PUBLIC partA partB)
#target_include_directories(progB2 PUBLIC partA partB)
#target_include_directories(progB3 PUBLIC partA partB)
#target_include_directories(progB4 PUBLIC partA partB)
#target_include_directories(progB5 PUBLIC partA partB)
#target_include_directories(progB6 PUBLIC partA partB)
#target_include_directories(progB7 PUBLIC partA partB)
#target_include_directories(progC1 PUBLIC partA partB partC)

find_package(GTest CONFIG REQUIRED)
add_executable(testA partA/test_partA_full.cpp ${SOURCES_PART_A})
target_link_libraries(testA date gtest gtest_main rt pthread)
target_include_directories(testA PUBLIC partA)
add_test(testA testA)

add_executable(testB partB/test_partB_full.cpp ${SOURCES_PART_A} ${SOURCES_PART_B})
target_link_libraries(testB date gtest gtest_main rt pthread)
target_include_directories(testB PUBLIC partA)
target_include_directories(testB PUBLIC partB)
add_test(testB testB)

add_executable(testC partC/test_partC_full.cpp ${SOURCES_PART_A} ${SOURCES_PART_B} ${SOURCES_PART_C})
target_link_libraries(testC date gtest gtest_main rt pthread)
target_include_directories(testC PUBLIC partA)
target_include_directories(testC PUBLIC partB)
target_include_directories(testC PUBLIC partC)
add_test(testC testC)

add_executable(dry dry/dry)
add_executable(dry_test dry/dry_test)
target_link_libraries(dry_test gtest gtest_main rt pthread)
add_test(dry dry_test)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
